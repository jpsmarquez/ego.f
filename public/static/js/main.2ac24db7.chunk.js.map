{"version":3,"sources":["config/firebaseconfig.js","views/Login.js","views/HomeAdmin.js","views/HomeE.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Login","useState","email","setEmail","password","setPassword","onChange","event","target","value","type","onClick","console","log","signInWithEmailAndPassword","catch","error","errorMessage","message","to","HomeAdmin","props","logout","HomeE","App","logged","setlogged","signOut","useEffect","onAuthStateChanged","user","ref","uid","once","snap","val","tipo","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAcEA,gBAXkB,CAChBC,OAAQ,0CACRC,WAAY,0BACZC,YAAa,iCACbC,UAAW,UACXC,cAAe,sBACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAIjBR,cCNa,SAASS,IAAS,IAAD,EACNC,mBAAS,IADH,mBACvBC,EADuB,KAChBC,EADgB,OAEAF,mBAAS,IAFT,mBAEvBG,EAFuB,KAEbC,EAFa,KAY9B,OACE,sCACE,2BAAOC,SAAU,SAACC,GAAD,OAASJ,EAASI,EAAMC,OAAOC,QAAQA,MAAOP,IAC/D,2BAAOI,SAAU,SAACC,GAAD,OAASF,EAAYE,EAAMC,OAAOC,QAAQA,MAAOL,EAAUM,KAAK,aACjF,4BAAQC,QAbG,WACbC,QAAQC,IAAIX,GACZU,QAAQC,IAAIT,GAEZb,SAAgBuB,2BAA2BZ,EAAOE,GAAUW,OAAM,SAASC,GACxE,IAAIC,EAAeD,EAAME,QACzBN,QAAQC,IAAII,QAOb,WACA,kBAAC,IAAD,CAAME,GAAG,W,OCtBA,SAASC,EAAUC,GAC9B,OACE,oCAEE,4BAAQV,QAASU,EAAMC,QAAvB,YCNO,SAASC,EAAMF,GAC1B,OACE,sCAAY,4BAAQV,QAASU,EAAMC,QAAvB,WAAZ,KCkBS,SAASE,IAAO,IAAD,EACAvB,mBAAS,MADT,mBACnBwB,EADmB,KACXC,EADW,KAGpBJ,EAAO,WACb/B,SAAgBoC,UAChBD,EAAU,OAkBV,OAfAE,qBAAU,WACJrC,SAAgBsC,oBAAmB,SAASC,GAC1ClB,QAAQC,IAAIiB,GACRA,EACFvC,aAAoBwC,IAAI,YAAYD,EAAKE,KAAKC,KAAK,SAAQ,SAAAC,GAC3DtB,QAAQC,IAAIqB,EAAKC,MAAMC,MACvBV,EAAUQ,EAAKC,MAAMC,SAGrBV,EAAU,YAOlB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAClB,GAAD,OAAUI,EAAO,kBAAC,IAAD,CAAUN,GAAG,UAAW,kBAACnB,EAAUqB,MAClF,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,QAAOC,OAAQ,SAAClB,GAAD,OAAUI,EAChC,UAATA,EACE,kBAACL,EAAD,iBAAeC,EAAf,CAAuBC,OAAQA,KAC7B,kBAACC,EAAD,iBAAWF,EAAX,CAAmBC,OAAQA,KAChC,kBAACtB,EAAUqB,QCzCAmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAACtB,EAAD,OAEFuB,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdvC,OAAM,SAAAC,GACLJ,QAAQI,MAAMA,EAAME,c","file":"static/js/main.2ac24db7.chunk.js","sourcesContent":["import * as firebase from 'firebase';\nimport \"firebase/auth\";\n\nconst Aplicacion =  {\n    apiKey: \"AIzaSyCsrJwOTh9EsWqCiyvXtuUoelsBsohcAIU\",\n    authDomain: \"egdeomx.firebaseapp.com\",\n    databaseURL: \"https://egdeomx.firebaseio.com\",\n    projectId: \"egdeomx\",\n    storageBucket: \"egdeomx.appspot.com\",\n    messagingSenderId: \"1012924663671\",\n    appId: \"1:1012924663671:web:3592cc97e4dd67cdec0372\",\n    measurementId: \"G-QL4JJ74DJY\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(Aplicacion);\n  firebase.analytics();\n\nexport {Aplicacion};\n","import React,{useEffect,useState} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport * as firebase from 'firebase';\nimport {Aplicacion} from '../config/firebaseconfig';\n\nconst A = {type:\"A\"};\nconst E = {type:\"E\"};\n\n\nexport default function Login() {\n  const [email, setEmail]=useState('');\n  const [password, setPassword]=useState('');\n  const submit = ()=>{\n    console.log(email);\n    console.log(password);\n\n    firebase.auth().signInWithEmailAndPassword(email, password).catch(function(error) {\n       var errorMessage = error.message;\n       console.log(errorMessage)\n       });\n  };\n  return (\n    <div>LOG IN\n      <input onChange={(event)=>setEmail(event.target.value)} value={email} />\n      <input onChange={(event)=>setPassword(event.target.value)} value={password} type=\"password\" />\n      <button onClick={submit}> SUBMIT</button>\n      <Link to=\"/Home\"/>\n    </div>\n\n  );\n};\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport { tsPropertySignature } from \"@babel/types\";\n\nexport default function HomeAdmin(props) {\n    return (\n      <div>\n        Home \n        <button onClick={props.logout}>log out</button>\n        </div>   \n    );\n};\n","import React from \"react\";\n\nexport default function HomeE(props) {\n    return (\n      <div >Home  <button onClick={props.logout}>log out</button> </div>\n\n    );\n}\n","import React,{useState, useEffect} from 'react';\nimport {BrowserRouter,Switch,Route,Redirect} from 'react-router-dom';\nimport * as firebase from \"firebase/app\";\nimport {Aplicacion} from \"./config/firebaseconfig\";\nimport Login from './views/Login';\nimport HomeAdmin from './views/HomeAdmin';\nimport HomeE from './views/HomeE';\n/*\n\nimport Employees from './views/Employees';\nimport Employee from './views/Employee';\nimport Inversions from './views/Inversions';\nimport Inversion from './views/Inversion';\nimport InversionsEmp from './views/InversionsEmp';\nimport InversionEmployee from './views/InversionEmployee';\nimport Profile from './views/Profile';\nimport ProfileEmp from './views/ProfileEmp';\nimport FPass from './views/FPass';\nimport NewP from './views/NewP';\nimport SwitchHome from './views/switchHome';\n*/\n\nexport default function App() {\n    const [logged, setlogged]=useState(null)\n\n    const logout=()=>{\n    firebase.auth().signOut()\n    setlogged(null)\n};\n\n    useEffect(()=>{\n          firebase.auth().onAuthStateChanged(function(user) {\n            console.log(user);\n            if (user) {\n              firebase.database().ref(\"/usuario/\"+user.uid).once(\"value\",snap=> {\n              console.log(snap.val().tipo)\n              setlogged(snap.val().tipo)\n              })\n            } else {\n              setlogged(null) \n            }\n          });\n        });\n\n\n    return (\n      <BrowserRouter> \n        <Switch>\n        <Route exact path=\"/\" render={(props)=>(logged?<Redirect to=\"/Home\" />:<Login {...props} /> )}/>\n        <Route exact path=\"/Home\"render={(props)=>(logged?\n          logged===\"admin\" ?\n            <HomeAdmin {...props}  logout={logout} />\n            : <HomeE {...props}  logout={logout} />\n        :<Login {...props}/> )} />\n        </Switch>\n      </BrowserRouter>\n    );\n};\n/*\n<Route exact path='/Login' component={Login}/>\n<Route exact path='/Employees' component={Employees}/>\n<Route exact path='/Home' component={HomeAdmin}/>\n<Route exact path='/Home' component={HomeAdmin}/>\n<Route exact path='/Home' component={HomeAdmin}/>\n<Route exact path='/Home' component={HomeAdmin}/>\n<Route exact path='/Home' component={HomeAdmin}/>\n<Route exact path='/Home' component={HomeAdmin}/>\n<Route exact path='/Home' component={HomeAdmin}/>\n<Route exact path='/Home' component={HomeAdmin}/>\n<Route exact path='/Home' component={HomeAdmin}/>\n<Route exact path='/Home' component={HomeAdmin}/>\n<Route exact path='/Home' component={HomeAdmin}/>\n<Route exact path='/Home' component={HomeAdmin}/>\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}